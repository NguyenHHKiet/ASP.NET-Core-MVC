@using Telerik.Scaffolders.Models.Grid

@{
    ViewBag.Title = "Employee";
}

<div class="">
    <section class="modal hidden">
        <div class="flex justify-content-end">
            <button class="btn-close"></button>
        </div>
        <div id="validation-success"></div>
        @(Html.Kendo().Form<EmployeeModel>()
                .Name("CreateFormEmployee")
                .Validatable(v =>
                {
                    v.ValidateOnBlur(true);
                    v.ValidationSummary(vs => vs.Enable(false));
                })
                .Items(items =>
                {
                    items.AddGroup()
                        .Label("Personal Information")
                        .Items(i =>
                        {
                            i.Add()
                                .Field(f => f.UserID)
                                .Label(l => l.Text("Mã nhân viên:"))
                                .InputHtmlAttributes(new { required = "required", style= "text-transform: uppercase" });
                            i.Add()
                                .Field(f => f.UserName)
                                .Label(l => l.Text("Tên nhân viên:"))
                                .InputHtmlAttributes(new { required = "required" });
                            i.Add()
                                .Field(f => f.Password)
                                .Label(l => l.Text("Mật khẩu:"))
                                .InputHtmlAttributes(new { required = "required", type = "password" });
                            i.Add()
                                .Field("ConfirmPassword")
                                .Label(l => l.Text("Confirm Password:"))
                                .InputHtmlAttributes(new { required = "required", type = "password" });
                            i.Add()
                                .Field(f => f.Email)
                                .Label(l => l.Text("Email:"))
                                .InputHtmlAttributes(new { required = "required" });
                            i.Add()
                                .Field(f => f.Tel)
                                .Label(l => l.Text("Số điện thoại:"))
                                .InputHtmlAttributes(new { required = "required" });
                            i.Add()
                                .Field(f => f.Disable)
                                .Label(l => l.Text("Disable:"))
                                .Editor(e =>
                                {
                                    e.ComboBox()
                                        .DataTextField("Text")
                                        .DataValueField("Value")
                                        .BindTo(new List<SelectListItem>() {
                                            new SelectListItem() {
                                                Text = "true", Value = "1"
                                            },
                                            new SelectListItem() {
                                                Text = "false", Value = "0"
                                            },
                                        });
                                })
                                .InputHtmlAttributes(new { required = "required" });
                            i.AddAntiForgeryToken();
                        });
                }).Events(ev => ev.ValidateField("onFormValidateField").Submit("onFormSubmit").Clear("onFormClear"))
            )
    </section>
    <div class="overlay hidden"></div>
    <button class="btn btn-open btn-success text-white mb-2">Create</button>
</div>



@(Html.Kendo().Grid<EmployeeModel>()
    .Name("employee")
        .Columns(columns =>
        {
            columns.Bound(p => p.UserID).Filterable(false);
            columns.Bound(p => p.UserName);
            columns.Bound(p => p.Password);
            columns.Bound(p => p.Email);
            columns.Bound(p => p.Tel);
            columns.Bound(p => p.Disable);
            columns.Command(command => { command.Edit().Text("Chỉnh sửa"); command.Destroy().Text("Xóa"); }).Width(200);
        })
        .Editable(editable => editable.Mode(GridEditMode.PopUp).ConfirmDelete("Bạn có muốn xóa không?").DisplayDeleteConfirmation("Bạn có muốn xóa không?"))
        //.ToolBar(toolbar =>
        //{
        //    toolbar.Create();
        //})
        .Resizable(resize => resize.Columns(true))
        .Pageable()
        .Sortable()
        .Scrollable(a => a.Height("auto"))
        .Reorderable(reorder => reorder.Columns(true))
        .Filterable()
        .ColumnMenu()
        .Groupable()
        .HtmlAttributes(new { style = "height:500px;" })
        .Events(e => e.Edit("hideIdField"))
        .DataSource(dataSource => dataSource
             .Ajax()
             .PageSize(20)
             .Model(model =>
             {
                 model.Id(gridMainAlias => gridMainAlias.UserID);
                 model.Field(gridMainAlias => gridMainAlias.UserName);
                 model.Field(gridMainAlias => gridMainAlias.Password);
                 model.Field(gridMainAlias => gridMainAlias.Email);
                 model.Field(gridMainAlias => gridMainAlias.Tel);
                 model.Field(gridMainAlias => gridMainAlias.Disable);
             })
             .Read(read => read.Action("Read", "Employee"))
             .Create(update => update.Action("Create", "Employee"))
             .Update(update => update.Action("Update", "Employee"))
             .Destroy(update => update.Action("Delete", "Employee"))
    )
)

<script>
    var checkedSubmit = false
    // Open Modal
    const modal = document.querySelector(".modal");
    const overlay = document.querySelector(".overlay");
    const openModalBtn = document.querySelector(".btn-open");
    const closeModalBtn = document.querySelector(".btn-close");

    const openModal = function () {
        modal.classList.remove("hidden");
        overlay.classList.remove("hidden");
    };
    const closeModal = function () {
        modal.classList.add("hidden");
        overlay.classList.add("hidden");
        $('#CreateFormEmployee').getKendoForm().clear();
        if (checkedSubmit) {
            window.location.reload();
        }
    };

    openModalBtn.addEventListener("click", openModal);
    closeModalBtn.addEventListener("click", closeModal);
    overlay.addEventListener("click", closeModal);
    document.addEventListener("keydown", function (e) {
        if (e.key === "Escape" && !modal.classList.contains("hidden")) {
            closeModal();
        }
    });

    //Create Form Employee Submit
    var submitBtn = document.getElementsByClassName("k-form-submit k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary");
    var clearBtn = document.getElementsByClassName("k-form-clear k-button k-button-md k-rounded-md k-button-solid k-button-solid-base");
   
    //'The page has fully loaded'
    window.addEventListener('load', (event) => {
        clearBtn[0].textContent = "Nhập tiếp";
        clearBtn[0].classList.add("d-none");
    });

    function hideIdField(e) {
        e.container.find("input:first").prop('disabled', true);
    }  


    function onFormValidateField(e) {
        $("#validation-success").html("");
    }

    function onFormSubmit(e) {
        e.preventDefault();

        if (checkPasswordMatch()) {
            var form = $("#CreateFormEmployee");

            // Lấy token từ thẻ input hidden
            var token = $("input[name='__RequestVerificationToken']").val();
            // Thêm token vào dữ liệu truyền đi
            var formData = form.serialize() + "&__RequestVerificationToken=" + token;

            $.ajax({
                url: "Employee/Create",
                type: "POST",
                data: parseQueryString(formData),
                success: function (response) {
                    // Xử lý phản hồi từ server (nếu cần)
                    checkedSubmit = response.success
                    $("#validation-success").html(`<div class='k-messagebox ${checkedSubmit ? 'k-messagebox-success' : 'k-messagebox-danger'}'>${response.message}</div>`);
                    if (checkedSubmit) {
                        submitBtn[0].setAttribute("disabled", "disabled");
                        clearBtn[0].classList.remove("d-none");
                    }
                },
                error: function (xhr, status, error) {
                    // Xử lý lỗi (nếu có)
                    console.log(error);
                }
            });
        }
    }

    function onFormClear(e) {
        $("#validation-success").html("");
        submitBtn[0].removeAttribute("disabled");
        clearBtn[0].classList.add("d-none");
    }

    function parseQueryString(queryString) {
        var params = queryString.split('&');
        var result = {};
        params.forEach(function (param) {
            var keyValue = param.split('=');
            var key = decodeURIComponent(keyValue[0]);
            var value = decodeURIComponent(keyValue[1] || '').trim();
            if (key != "ConfirmPassword") {
                result[key] = key == "UserID" ? value.toUpperCase() : value;
            }
        });
        return result;
    }

    function checkPasswordMatch() {
        var password = $("#Password").val();
        var confirmPassword = $("#ConfirmPassword").val();

        if (password != confirmPassword) {
            alert("Mật khẩu không khớp. Vui lòng nhập lại.");
            return false;
        } else {
            return true;
        }
    }


</script>
