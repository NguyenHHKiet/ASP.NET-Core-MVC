@model BasicCRUDWeb1.Models.Employee

@{
    ViewBag.Title = "Create";
}



<div class="container">
    <h2>Create 뜨ㅔㅣ</h2>
    <div id="validation-success"></div>
    @(Html.Kendo().Form<BasicCRUDWeb1.Models.Employee>()
        .Name("CreateFormEmployee")
        .HtmlAttributes(new { action = @Url.Action("Create", "Employee"), method = "POST" })
        .Validatable(v =>
        {
            v.ValidateOnBlur(true);
            v.ValidationSummary(vs => vs.Enable(false));
        })
        .Items(items =>
        {
            items.AddGroup()
                .Label("Create Form Employee")
                .Items(i =>
                {

                    i.Add()
                         .Field(f => f.UserID)
                         .Label(l => l.Text("Mã nhân viên:"))
                         .InputHtmlAttributes(new { required = "required" });
                    i.Add()
                        .Field(f => f.UserName)
                        .Label(l => l.Text("Tên nhân viên:"))
                        .InputHtmlAttributes(new { required = "required" });
                    i.Add()
                        .Field(f => f.Password)
                        .Label(l => l.Text("Password:"))
                        .InputHtmlAttributes(new { required = "required", type = "password" });
                    i.Add()
                        .Field("ConfirmPassword")
                        .Label(l => l.Text("Confirm Password:"))
                        .InputHtmlAttributes(new { required = "required", type = "password" });
                    i.Add()
                        .Field(f => f.Email)
                        .Label(l => l.Text("Email:"))
                        .InputHtmlAttributes(new { rqeuired="required", type = "email" });
                    i.Add()
                       .Field(f => f.Tel)
                       .Label(l => l.Text("Số điện thoại:"))
                       .InputHtmlAttributes(new { required = "required" });
                    i.Add()
                        .Field(f => f.Disable)
                        .Label(l => l.Text("Disable:"))
                        .InputHtmlAttributes(new { required = "required" });

                    i.AddAntiForgeryToken();

                });
        })
        .Events(ev => ev.ValidateField("onFormValidateField").Submit("onFormSubmit").Clear("onFormClear"))
    )
</div>
<script>
    var submitBtn = document.getElementsByClassName("k-form-submit k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary");
    var clearBtn = document.getElementsByClassName("k-form-clear k-button k-button-md k-rounded-md k-button-solid k-button-solid-base");

    function onFormValidateField(e) {
        $("#validation-success").html("");
    }

    function onFormSubmit(e) {
        e.preventDefault();
        var password = $("#Password").val();
        var confirmPassword = $("#ConfirmPassword").val();

        if (password == confirmPassword) {
            var form = $("#CreateFormEmployee");

            // Lấy token từ thẻ input hidden
            var token = $("input[name='__RequestVerificationToken']").val();
            // Thêm token vào dữ liệu truyền đi
            var formData = form.serialize() + "&__RequestVerificationToken=" + token;
            console.log(formData,
                form.attr("action"),
                form.attr("method")
            )

            //new BasicCRUDWeb1.Models.Employee(parseQueryString(form.serialize())),

            $.ajax({
                url: form.attr("action"),
                type: form.attr("method"),
                data: parseQueryString(formData),
                success: function (response) {
                    console.log(response);
                    // Xử lý phản hồi từ server (nếu cần)
                    $("#validation-success").html(`<div class='k-messagebox ${response.success ? 'k-messagebox-success' : 'k-messagebox-danger'}'>${response.message}</div>`);
                    if (response.success) {
                        submitBtn[0].setAttribute("disabled", "disabled");
                    }
                },
                error: function (xhr, status, error) {
                    // Xử lý lỗi (nếu có)
                    console.log(error);
                }
            });
        } else {
            alert("Confirm Password must match Password");
        }

    }

    function onFormClear(e) {
        $("#validation-success").html("");
        submitBtn[0].removeAttribute("disabled");
        console.log(clearBtn);
    }

    function parseQueryString(queryString) {
        var params = queryString.split('&');
        var result = {};
        params.forEach(function (param) {
            var keyValue = param.split('=');
            var key = decodeURIComponent(keyValue[0]);
            var value = decodeURIComponent(keyValue[1] || '');
            if (key != "ConfirmPassword") {
                result[key] = value;
            }
        });
        return result;
        }

</script>
