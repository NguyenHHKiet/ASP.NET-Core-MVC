@using Telerik.Scaffolders.Models.Grid

<style>
    .modal {
        display: flex;
        flex-direction: column;
        justify-content: center;
        width: 500px;
        padding: 1.3rem;
        min-height: 250px;
        background-color: white;
        border: 1px solid #ddd;
        border-radius: 15px;
        z-index: 100;
        left: calc(50% - 250px);
        top: 5%;
        height: auto;
    }

        .modal .flex {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .modal input {
            padding: 0.7rem 1rem;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 0.9em;
        }

        .modal p {
            font-size: 0.9rem;
            color: #777;
            margin: 0.4rem 0 0.2rem;
        }

    button {
        cursor: pointer;
        border: none;
        font-weight: 600;
    }

    .btn-close {
        padding: 0.7rem 0.7rem;
        background: #eee;
        border-radius: 50%;
    }

    .overlay {
        position: fixed;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(3px);
        z-index: 1;
    }

    .hidden {
        display: none;
    }
</style>

<div class="">
    <section class="modal hidden">
        <div class="flex justify-content-end">
            <button class="btn-close">⨉</button>
        </div>
        <div id="validation-success"></div>
        @(Html.Kendo().Form<EmployeeModel>()
                .Name("CreateFormEmployee")
                .HtmlAttributes(new { action = "", method = "POST" })
                .Validatable(v =>
                {
                    v.ValidateOnBlur(true);
                    v.ValidationSummary(vs => vs.Enable(false));
                })
                .Items(items =>
                {
                    items.AddGroup()
                        .Label("Personal Information")
                        .Items(i =>
                        {
                            i.Add()
                                .Field(f => f.UserID)
                                .Label(l => l.Text("Mã nhân viên:"));
                            i.Add()
                                .Field(f => f.UserName)
                                .Label(l => l.Text("Tên nhân viên:"));
                            i.Add()
                                .Field(f => f.Password)
                                .Label(l => l.Text("Mật khẩu:"))
                                .InputHtmlAttributes(new { required = "required", type = "password" });
                            i.Add()
                                .Field("ConfirmPassword")
                                .Label(l => l.Text("Confirm Password:"))
                                .InputHtmlAttributes(new { required = "required", type = "password" });
                            i.Add()
                                .Field(f => f.Email)
                                .Label(l => l.Text("Email:"));
                            i.Add()
                                .Field(f => f.Tel)
                                .Label(l => l.Text("Số điện thoại:"));
                            i.Add()
                                .Field(f => f.Disable)
                                .Label(l => l.Text("Disable:"))
                                .Editor(e =>
                                {
                                    e.ComboBox()
                                        .DataTextField("Text")
                                        .DataValueField("Value")
                                        .BindTo(new List<SelectListItem>() {
                                            new SelectListItem() {
                                                Text = "true", Value = "1"
                                            },
                                            new SelectListItem() {
                                                Text = "false", Value = "0"
                                            },
                                        });
                                });
                            i.AddAntiForgeryToken();
                        });
                }).Events(ev => ev.ValidateField("onFormValidateField").Submit("onFormSubmit").Clear("onFormClear"))
            )
    </section>
    <div class="overlay hidden"></div>
    <button class="btn btn-open btn-success text-white mb-2">Open Modal</button>
</div>



@(Html.Kendo().Grid<EmployeeModel>()
    .Name("employee")
       .Columns(columns =>
       {
           columns.Bound(p => p.UserID).Filterable(false);
           columns.Bound(p => p.UserName);
           columns.Bound(p => p.Password);
           columns.Bound(p => p.Email);
           columns.Bound(p => p.Tel);
           columns.Bound(p => p.Disable);
           columns.Command(command => { command.Edit().Text("Chỉnh sửa"); command.Destroy().Text("Xóa"); }).Width(200);
       })
        .Editable(editable => editable.Mode(GridEditMode.PopUp))
        .Editable(editable => editable.Mode(GridEditMode.PopUp).ConfirmDelete("Bạn có muốn xóa không?").DisplayDeleteConfirmation("Bạn có muốn xóa không?"))
        //.ToolBar(toolbar =>
        //{
        //    toolbar.Create();
        //})
        .Resizable(resize => resize.Columns(true))
        .Pageable()
        .Sortable()
        .Scrollable()
        .Reorderable(reorder => reorder.Columns(true))
        .Filterable()
        .ColumnMenu()
        .Groupable()
        .HtmlAttributes(new { style = "height:430px;" })
        .DataSource(dataSource => dataSource
             .Ajax()
             .PageSize(20)
             .Model(model => model.Id(p => p.UserID))
             .Read(read => read.Action("Read", "Employee"))
             .Create(update => update.Action("Create", "Employee"))
             .Update(update => update.Action("Update", "Employee"))
             .Destroy(update => update.Action("Delete", "Employee"))
    )
)

<script>
    const modal = document.querySelector(".modal");
    const overlay = document.querySelector(".overlay");
    const openModalBtn = document.querySelector(".btn-open");
    const closeModalBtn = document.querySelector(".btn-close");

    const openModal = function () {
        modal.classList.remove("hidden");
        overlay.classList.remove("hidden");
    };
    const closeModal = function () {
        modal.classList.add("hidden");
        overlay.classList.add("hidden");
    };

    openModalBtn.addEventListener("click", openModal);
    closeModalBtn.addEventListener("click", closeModal);
    overlay.addEventListener("click", closeModal);
    document.addEventListener("keydown", function (e) {
        if (e.key === "Escape" && !modal.classList.contains("hidden")) {
            modalClose();
        }
    });


    var submitBtn = document.getElementsByClassName("k-form-submit k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary");
    var clearBtn = document.getElementsByClassName("k-form-clear k-button k-button-md k-rounded-md k-button-solid k-button-solid-base");

    function onFormValidateField(e) {
        $("#validation-success").html("");
    }

    function onFormSubmit(e) {
        e.preventDefault();

        if (checkPasswordMatch()) {
            var form = $("#CreateFormEmployee");

            // Lấy token từ thẻ input hidden
            var token = $("input[name='__RequestVerificationToken']").val();
            // Thêm token vào dữ liệu truyền đi
            var formData = form.serialize() + "&__RequestVerificationToken=" + token;

            $.ajax({
                url: "Create",
                type: form.attr("method"),
                data: parseQueryString(formData),
                success: function (response) {
                    console.log(response);
                    // Xử lý phản hồi từ server (nếu cần)
                    $("#validation-success").html(`<div class='k-messagebox ${response.success ? 'k-messagebox-success' : 'k-messagebox-danger'}'>${response.message}</div>`);
                    if (response.success) {
                        submitBtn[0].setAttribute("disabled", "disabled");
                    }
                },
                error: function (xhr, status, error) {
                    // Xử lý lỗi (nếu có)
                    console.log(error);
                }
            });
        }

    }

    function onFormClear(e) {
        $("#validation-success").html("");
        submitBtn[0].removeAttribute("disabled");
        console.log(clearBtn);
    }

    function parseQueryString(queryString) {
        var params = queryString.split('&');
        var result = {};
        params.forEach(function (param) {
            var keyValue = param.split('=');
            var key = decodeURIComponent(keyValue[0]);
            var value = decodeURIComponent(keyValue[1] || '');
            if (key != "ConfirmPassword") {
                result[key] = value;
            }
        });
        return result;
    }

    function checkPasswordMatch() {
        var password = document.getElementById("password").value;
        var confirmPassword = document.getElementById("confirmPassword").value;

        if (password != confirmPassword) {
            alert("Mật khẩu không khớp. Vui lòng nhập lại.");
            return false;
        } else {
            return true;
        }
    }


</script>
