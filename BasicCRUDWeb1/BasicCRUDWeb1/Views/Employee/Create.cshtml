@model BasicCRUDWeb1.Models.Employee

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal d-flex flex-column gap-2">
    <h4>Employee</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.UserID, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.UserID, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.UserID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        <label for="confirmPassword" class="control-label col-md-2">Confirm Password:</label>
        <input type="password" id="confirmPassword" name="confirmPassword" required class="form-control">
        <p id="message"></p>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Tel, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Tel, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Tel, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Disable, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Disable, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Disable, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group d-flex gap-2">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" id="saveBtn" value="Create" class="btn btn-success" />
        </div>
        <div class="col-md-offset-2 col-md-10">
            <button type="button" id="addMoreBtn" style="display: none;" class="btn btn-light">Add More</button>
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const saveBtn = document.getElementById("saveBtn");
        const addMoreBtn = document.getElementById("addMoreBtn");
        const userId = document.getElementById("UserID");
        const username = document.getElementById("UserName");
        const password = document.getElementById("Password");
        const email = document.getElementById("Email");
        const tel = document.getElementById("Tel");
        const disable = document.getElementById("Disable");

        const confirmPasswordInput = document.getElementById("confirmPassword");

        confirmPasswordInput.addEventListener("keyup", function () {
            if (!validatePassword()) {
                message.textContent = "Passwords do not match";
            } else {
                message.textContent = "";
            }
        });

        saveBtn.addEventListener("submit", function (e) {
            // Disable save button
            saveBtn.disabled = true;
            saveBtn.style.opacity = "80%";
            // Show add more button
            addMoreBtn.style.display = "inline-block";
        });

        addMoreBtn.addEventListener("click", function () {
            // Clear all inputs
            userId.value = ""
            username.value = ""
            password.value = ""
            email.value = ""
            tel.value = ""
            disable.value = ""
            // Hide add more button
            addMoreBtn.style.display = "none";
            // Enable save button
            saveBtn.disabled = false;
            saveBtn.style.opacity = "100%";
        });

        function validatePassword() {
            if (password.value !== confirmPasswordInput.value) {
                return false;
            }
            return true;
        }
    });
</script>

